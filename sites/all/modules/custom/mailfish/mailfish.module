<?php
/**
* Implementing hook_menu() for mailfish module
*/

function mailfish_menu(){
  $items = array();
  $items['node/%/subscribe'] = array(
    'title' => 'Subscribe',
    'description' => 'Subscribe to this node',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailfish_form'),
    'access callback' => 'mailfish_access_subscribe_tab',
    'access arguments' => 'submit mailfish signups',
    'type' => MENU_LOCAL_TASK,
  );
/*menu for configuration screen */
  $items['admin/config/content/mailfish'] = array(
    'title' => 'Mailfish Settings',
    'description' => 'Administer Mailfish Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailfish_admin_settings_form'),
    'access arguments' => 'administer mailfish settings',
    'file' => 'mailfish.admin.inc',
  );
  /*menu for admin reporting page */
  $items['admin/reports/mailfish'] = array(
    'title' => 'Mailfish Signups',
    'description' => 'View Mailfish Signups',
    'page callback' => 'mailfish_signups',
    'access arguments' => 'view mailfish report',
    'file' => 'mailfish.admin.inc',
  );
  return $items;
}

/**
* Implementing form to add an email address
*/

function mailfish_form($form, $form_state, $nid = 0){
  global $user;
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#size' => 25,
    '#description'=> t('Join our mailing list'),
    '#required' => TRUE,
    '#default_value' => isset($user->mail) ? $user->mail : '',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sign Up!'),
    '#submit' =>  array('mailfish_form_submit'),
    '#validate' =>  array('mailfish_form_validation'),
    );
   return $form;
}

/**
* Implementing form validation
*/

function mailfish_form_validation($form, &$form_state){
  $email = $form_state['values']['email'];
  if (!valid_email_address($email)) {
     $message = t('The address email %email is not a valid email address please re-enter our email address', array('%email' => $email));
     form_set_error('email', $message);
  }

  //Performs check on database check on signup
  $nid = form_state['values']['nid'];
  $previous_signup = db_query("SELECT mail FROM {mailfish} WHERE nid = :nid AND mail = :mail", array('nid' => $nid, 'mail' => $email))->fetchField();
    if($previous_signup){
      form_set_error('email', t('The email %email is already subscribed to this list.', array('%email' => $email)));
    }
}

/**
* Implementing hook_form_submit
*/

function mailfish_form_submit($form, &$form_state){
  $nid = isset($form_state['values']['nid']) ? $form_state['values']['nid'] : 0;
  if(is_numeric($nid)){
  mailfish_signup($form_state['values']['email'], $form_state['values']['nid']);
  drupal_set_message(t('Thank you for joining the email list. you have been added as %email.', array('%email' => $form_state['values']['email'])));
  }
}

/**
* Implementing signup
*/

function mailfish_signup($email, $nid){
  global $user;
  $value = array(
     'nid' =>  $nid,
     'uid' =>  $user->uid,
     'mail' => $email,
     'created' => time(),
  );

  drupal_write_record('mailfish', $value);
}

/**
* Implementing hook_permission
*/
function mailfish_permission(){
  $perm = array(
   'submit mailfish signups' => array(
     'title' => t('Submit Mailfish Signups'),
   ),
   'view mailfish report' => array(
     'title' => t('View Mailfish Subscriptions Report'),
   ),

   'administer mailfish settings' => array(
     'title' => t('Administer mailfish settings'),
   ),
  );
  return $perm;
}

/**
* Implementing hook_block_info
*/
function mailfish_block_info() {
  $blocks = array();
  $blocks['mailfish_subscribe'] = array(
    'info' => t('Mailfish Signup Form'),
  );
  return $blocks;
}

/**
* Implementing hook_block_view
*/
function mailfish_block_view($delta) {
  $blocks = array();
  switch($delta) {
    case  'mailfish_subscribe' :
      if (arg(0) == 'node' && is_numeric(arg(1)) && mailfish_get_node_enabled(arg(1))){
        $nid = arg(1);
        $form = drupal_get_form('mailfish_email_form', $nid);
        $blocks['subject'] = t('Sign up for this node');
        $blocks['content'] = theme('mailfish_block', array('form' => drupal_render($form)));
      }
        break;
  }
  return $blocks;
}

/**
* Implementing hook_block_view
*/
function mailfish_theme(){
  $theme = array();
  $theme['mailfish_block'] = array(
     'variables' => array(
       'form' => '',
     ),
     'template' => 'mailfish-block',
   );
   return $theme;
}

/**
* Implementing hook_form_BASE_form_alter
*/

function mailfish_form_node_form_alter(&$form, $form_state, $form_id){
  $node = $form['#node'];
  $types = variable_get('mailfish_types', array());
  if (!empty($types[$node->type]) && user_access('administer mailfish settings')) {
    $form['mailfish'] = array(
      '#title' => t('Mailfish'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'additional_settings',
    );
    $form['mailfish']['mailfish_enabled'] = array(
      '#title' => t('Collect e-mail addresses for this node.'),
      '#type' => 'checkbox',
      '#default_value' => isset($node->mailfish_enabled) ?
$node->mailfish_enabled : FALSE,
    );
  }
}

function mailfish_get_node_enabled($nid){
  if (is_numeric($nid)) {
    $result = db_query("SELECT nid FROM {mailfish_enabled}
      WHERE nid = :nid", array('nid' => $nid))->fetchField();
    if ($result) {
      return TRUE;
    }
  }
  return FALSE;
}
function mailfish_set_node_enabled($nid){
  if (is_numeric($nid) &! mailfish_get_node_enabled($nid)) {
      db_insert('mailfish_enabled')
        ->fields(array('nid' => $nid))
        ->execute();
  }
}
function mailfish_delete_node_enabled($nid) {
  if (is_numeric($nid)) {
    db_delete('mailfish_enabled')
      ->condition('nid', $nid)
      ->execute();
  }
}

function mailfish_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    $node->mailfish_enabled = mailfish_get_node_enabled($node->nid);
  }
}
function mailfish_node_insert($node) {
  if ($node->mailfish_enabled) {
    mailfish_set_node_enabled($node->nid);
  }
}
function mailfish_node_update($node) {
  mailfish_delete_node_enabled($node->nid);
  if ($node->mailfish_enabled) {
    mailfish_set_node_enabled($node->nid);
  }
}
function mailfish_node_delete($node) {
  mailfish_delete_node_enabled($node->nid);
}
function mailfish_access_subscribe_tab($permission, $nid) {
    return mailfish_get_node_enabled($nid) && user_access($permission);
}
